

class User:
    def __init__(self, username, password, password_conf):
        # При создании экземпляра класса User, сохраняем имя пользователя в атрибуте self.username
        self.username = username
        # Проверяем, совпадают ли введенные пользователем пароли
        if password == password_conf:
            # Если пароли совпадают, сохраняем пароль в атрибуте self.password
            self.password = password
"""""
В этом классе определяется пользователь с именем, паролем и подтверждением пароля. 
Пароль сохраняется только если он был введен правильно (пароль равен подтверждению).
"""""

class Database:
    def __init__(self):
        # В конструкторе класса Database создаем пустой словарь для хранения пользователей
        self.data = {}

    def add_user(self, username, password):
        # Метод add_user принимает имя пользователя и пароль, затем добавляет пару ключ-значение в словарь data
        self.data[username] = password
"""""
Класс Database предназначен для хранения пользователей и их паролей. 
Метод add_user используется для добавления нового пользователя в базу данных.
"""""


if __name__ == '__main__':
    database = Database()  # Создаем экземпляр базы данных
    user = User(input('Введите имя: '), input('Введите пароль: '), input('Подтвердите пароль: '))  # Запрашиваем данные пользователя
    database.add_user(user.username, user.password)  # Добавляем пользователя в базу данных, если пароли совпали

"""""
В блоке if __name__ == '__main__' происходит создание экземпляров классов User и Database, 
а также добавление пользователя в базу данных. 
Пользователь вводится через стандартный ввод, и если пароли совпадают, то его данные сохраняются в базе данных.
"""""
